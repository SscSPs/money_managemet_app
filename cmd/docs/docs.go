// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/accounts": {
            "post": {
                "description": "Creates a new account (Asset, Liability, Equity, Income, Expense)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Create a new financial account",
                "parameters": [
                    {
                        "description": "Account details",
                        "name": "account",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.AccountResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/accounts/{accountID}": {
            "get": {
                "description": "Retrieves details for a specific account by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Get an account by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Account ID",
                        "name": "accountID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.AccountResponse"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticates a user (dummy implementation) and returns a JWT.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Log in a user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials (dummy check)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error (token generation failed)",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/currencies": {
            "get": {
                "description": "Retrieves a list of all currencies supported by the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "currencies"
                ],
                "summary": "List all available currencies",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.CurrencyResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Adds a new currency to the system (e.g., USD, EUR)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "currencies"
                ],
                "summary": "Create a new currency",
                "parameters": [
                    {
                        "description": "Currency details",
                        "name": "currency",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateCurrencyRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.CurrencyResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/currencies/{currencyCode}": {
            "get": {
                "description": "Retrieves details for a specific currency by its 3-letter code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "currencies"
                ],
                "summary": "Get a currency by code",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Currency Code (3 uppercase letters)",
                        "name": "currencyCode",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CurrencyResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid currency code format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Currency not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/example/helloworld": {
            "get": {
                "description": "get a welcome message",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "home"
                ],
                "summary": "Show a welcome message",
                "responses": {
                    "200": {
                        "description": "Welcome to my Go app!",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/ledger/": {
            "post": {
                "description": "Creates a new journal and associated transactions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ledger"
                ],
                "summary": "Persist a journal entry with its transactions",
                "parameters": [
                    {
                        "description": "Journal and Transactions",
                        "name": "journal",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateJournalAndTxn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ledger/{journalID}": {
            "get": {
                "description": "Retrieves a journal and its associated transactions by journal ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ledger"
                ],
                "summary": "Get a journal entry and its transactions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Journal ID",
                        "name": "journalID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.CreateJournalAndTxn"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Retrieves a paginated list of users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "List users",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Limit number of results",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ListUsersResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/{userID}": {
            "get": {
                "description": "Retrieves details for a specific user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates a user's details (currently only name)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID to update",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User details to update",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Soft-deletes a user by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID to delete",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AccountResponse": {
            "type": "object",
            "properties": {
                "accountID": {
                    "type": "string"
                },
                "accountType": {
                    "$ref": "#/definitions/models.AccountType"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "currencyCode": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "lastUpdatedAt": {
                    "type": "string"
                },
                "lastUpdatedBy": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentAccountID": {
                    "description": "Note: Empty string if null in DB",
                    "type": "string"
                }
            }
        },
        "dto.CreateAccountRequest": {
            "type": "object",
            "required": [
                "accountType",
                "currencyCode",
                "name"
            ],
            "properties": {
                "accountType": {
                    "enum": [
                        "ASSET",
                        "LIABILITY",
                        "EQUITY",
                        "INCOME",
                        "EXPENSE"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.AccountType"
                        }
                    ]
                },
                "currencyCode": {
                    "type": "string"
                },
                "description": {
                    "description": "Optional",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "parentAccountID": {
                    "description": "Optional, use pointer for nullability",
                    "type": "string"
                },
                "userID": {
                    "description": "needed for audit fields",
                    "type": "string"
                }
            }
        },
        "dto.CreateCurrencyRequest": {
            "type": "object",
            "required": [
                "currencyCode",
                "name",
                "symbol",
                "userID"
            ],
            "properties": {
                "currencyCode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "dto.CreateJournalAndTxn": {
            "type": "object",
            "properties": {
                "journal": {
                    "$ref": "#/definitions/models.Journal"
                },
                "transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Transaction"
                    }
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "dto.CreateUserRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.CurrencyResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "currencyCode": {
                    "type": "string"
                },
                "lastUpdatedAt": {
                    "type": "string"
                },
                "lastUpdatedBy": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                }
            }
        },
        "dto.ListUsersResponse": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.UserResponse"
                    }
                }
            }
        },
        "dto.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Only name is updatable for now",
                    "type": "string"
                }
            }
        },
        "dto.UserResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "lastUpdatedAt": {
                    "type": "string"
                },
                "lastUpdatedBy": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handlers.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "models.AccountType": {
            "type": "string",
            "enum": [
                "ASSET",
                "LIABILITY",
                "EQUITY",
                "INCOME",
                "EXPENSE"
            ],
            "x-enum-varnames": [
                "Asset",
                "Liability",
                "Equity",
                "Income",
                "Expense"
            ]
        },
        "models.Journal": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "description": "UserID Reference",
                    "type": "string"
                },
                "currencyCode": {
                    "description": "Primary currency of the Journal (Not Null)",
                    "type": "string"
                },
                "description": {
                    "description": "Nullable user description",
                    "type": "string"
                },
                "journalDate": {
                    "description": "Date the event occurred",
                    "type": "string"
                },
                "journalID": {
                    "description": "Primary Key (e.g., UUID)",
                    "type": "string"
                },
                "lastUpdatedAt": {
                    "type": "string"
                },
                "lastUpdatedBy": {
                    "description": "UserID Reference",
                    "type": "string"
                },
                "status": {
                    "description": "Default: Posted",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.JournalStatus"
                        }
                    ]
                }
            }
        },
        "models.JournalStatus": {
            "type": "string",
            "enum": [
                "POSTED",
                "REVERSED"
            ],
            "x-enum-varnames": [
                "Posted",
                "Reversed"
            ]
        },
        "models.Transaction": {
            "type": "object",
            "properties": {
                "accountID": {
                    "description": "FK -\u003e Account.accountID (Not Null)",
                    "type": "string"
                },
                "amount": {
                    "description": "Positive value; Precise decimal type",
                    "type": "number"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "description": "UserID Reference",
                    "type": "string"
                },
                "currencyCode": {
                    "description": "Must match Journal currency (Not Null)",
                    "type": "string"
                },
                "journalID": {
                    "description": "FK -\u003e Journal.journalID (Not Null)",
                    "type": "string"
                },
                "lastUpdatedAt": {
                    "type": "string"
                },
                "lastUpdatedBy": {
                    "description": "UserID Reference",
                    "type": "string"
                },
                "notes": {
                    "description": "Nullable",
                    "type": "string"
                },
                "transactionID": {
                    "description": "Primary Key (e.g., UUID)",
                    "type": "string"
                },
                "transactionType": {
                    "description": "DEBIT or CREDIT (Not Null)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TransactionType"
                        }
                    ]
                }
            }
        },
        "models.TransactionType": {
            "type": "string",
            "enum": [
                "DEBIT",
                "CREDIT"
            ],
            "x-enum-varnames": [
                "Debit",
                "Credit"
            ]
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "security": [
        {
            "BearerAuth": []
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "MMA Backend API",
	Description:      "This is a sample server for MMA backend.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
