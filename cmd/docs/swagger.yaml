basePath: /
definitions:
  domain.AccountType:
    enum:
    - ASSET
    - LIABILITY
    - EQUITY
    - INCOME
    - EXPENSE
    type: string
    x-enum-varnames:
    - Asset
    - Liability
    - Equity
    - Income
    - Expense
  dto.AccountResponse:
    properties:
      accountID:
        type: string
      accountType:
        $ref: '#/definitions/domain.AccountType'
      createdAt:
        type: string
      createdBy:
        type: string
      currencyCode:
        type: string
      description:
        type: string
      isActive:
        type: boolean
      lastUpdatedAt:
        type: string
      lastUpdatedBy:
        type: string
      name:
        type: string
      parentAccountID:
        description: 'Note: Empty string if null in DB'
        type: string
    type: object
  dto.CreateAccountRequest:
    properties:
      accountType:
        allOf:
        - $ref: '#/definitions/domain.AccountType'
        enum:
        - ASSET
        - LIABILITY
        - EQUITY
        - INCOME
        - EXPENSE
      currencyCode:
        type: string
      description:
        description: Optional
        type: string
      name:
        type: string
      parentAccountID:
        description: Optional, use pointer for nullability
        type: string
      userID:
        description: needed for audit fields
        type: string
    required:
    - accountType
    - currencyCode
    - name
    type: object
  dto.CreateCurrencyRequest:
    properties:
      currencyCode:
        type: string
      name:
        type: string
      symbol:
        type: string
      userID:
        type: string
    required:
    - currencyCode
    - name
    - symbol
    - userID
    type: object
  dto.CreateExchangeRateRequest:
    properties:
      dateEffective:
        type: string
      fromCurrencyCode:
        type: string
      rate:
        description: Consider adding validation for > 0
        type: number
      toCurrencyCode:
        type: string
    required:
    - dateEffective
    - fromCurrencyCode
    - rate
    - toCurrencyCode
    type: object
  dto.CreateJournalAndTxn:
    properties:
      journal:
        $ref: '#/definitions/models.Journal'
      transactions:
        items:
          $ref: '#/definitions/models.Transaction'
        type: array
      userID:
        type: string
    type: object
  dto.CreateUserRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  dto.CurrencyResponse:
    properties:
      currencyCode:
        type: string
      name:
        type: string
      symbol:
        type: string
    type: object
  dto.ExchangeRateResponse:
    properties:
      createdAt:
        type: string
      createdBy:
        type: string
      dateEffective:
        type: string
      exchangeRateID:
        type: string
      fromCurrencyCode:
        type: string
      lastUpdatedAt:
        type: string
      lastUpdatedBy:
        type: string
      rate:
        type: number
      toCurrencyCode:
        type: string
    type: object
  dto.GetJournalResponse:
    properties:
      journal:
        $ref: '#/definitions/dto.JournalResponse'
      transactions:
        items:
          $ref: '#/definitions/dto.TransactionResponse'
        type: array
    type: object
  dto.JournalResponse:
    properties:
      createdAt:
        type: string
      createdBy:
        type: string
      date:
        type: string
      description:
        type: string
      journalID:
        type: string
    type: object
  dto.ListAccountsResponse:
    properties:
      accounts:
        items:
          $ref: '#/definitions/dto.AccountResponse'
        type: array
    type: object
  dto.ListUsersResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/dto.UserResponse'
        type: array
    type: object
  dto.TransactionResponse:
    properties:
      accountID:
        type: string
      amount:
        type: number
      transactionID:
        type: string
      type:
        description: DEBIT or CREDIT
        type: string
    type: object
  dto.UpdateAccountRequest:
    properties:
      description:
        description: 'Optional: New description'
        type: string
      isActive:
        description: 'Optional: New active status'
        type: boolean
      name:
        description: 'Optional: New name'
        type: string
    type: object
  dto.UpdateUserRequest:
    properties:
      name:
        description: Only name is updatable for now
        type: string
    type: object
  dto.UserResponse:
    properties:
      createdAt:
        type: string
      createdBy:
        type: string
      lastUpdatedAt:
        type: string
      lastUpdatedBy:
        type: string
      name:
        type: string
      userID:
        type: string
    type: object
  handlers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  handlers.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  handlers.LoginResponse:
    properties:
      token:
        type: string
    type: object
  models.Journal:
    properties:
      createdAt:
        type: string
      createdBy:
        description: UserID Reference
        type: string
      currencyCode:
        description: Primary currency of the Journal (Not Null)
        type: string
      description:
        description: Nullable user description
        type: string
      journalDate:
        description: Date the event occurred
        type: string
      journalID:
        description: Primary Key (e.g., UUID)
        type: string
      lastUpdatedAt:
        type: string
      lastUpdatedBy:
        description: UserID Reference
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.JournalStatus'
        description: 'Default: Posted'
    type: object
  models.JournalStatus:
    enum:
    - POSTED
    - REVERSED
    type: string
    x-enum-varnames:
    - Posted
    - Reversed
  models.Transaction:
    properties:
      accountID:
        description: FK -> Account.accountID (Not Null)
        type: string
      amount:
        description: Positive value; Precise decimal type
        type: number
      createdAt:
        type: string
      createdBy:
        description: UserID Reference
        type: string
      currencyCode:
        description: Must match Journal currency (Not Null)
        type: string
      journalID:
        description: FK -> Journal.journalID (Not Null)
        type: string
      lastUpdatedAt:
        type: string
      lastUpdatedBy:
        description: UserID Reference
        type: string
      notes:
        description: Nullable
        type: string
      transactionID:
        description: Primary Key (e.g., UUID)
        type: string
      transactionType:
        allOf:
        - $ref: '#/definitions/models.TransactionType'
        description: DEBIT or CREDIT (Not Null)
    type: object
  models.TransactionType:
    enum:
    - DEBIT
    - CREDIT
    type: string
    x-enum-varnames:
    - Debit
    - Credit
host: localhost:8080
info:
  contact: {}
  description: This is a sample server for MMA backend.
  title: MMA Backend API
  version: "1.0"
paths:
  /accounts:
    get:
      description: Retrieves a list of accounts owned by the logged-in user
      parameters:
      - default: 20
        description: Limit number of results
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListAccountsResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to list accounts
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List accounts for the logged-in user
      tags:
      - accounts
    post:
      consumes:
      - application/json
      description: Creates a new account for the logged-in user
      parameters:
      - description: Account details
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.CreateAccountRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.AccountResponse'
        "400":
          description: Invalid input format or validation error
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to create account
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new account
      tags:
      - accounts
  /accounts/{id}:
    delete:
      description: Marks an account as deleted (soft delete)
      parameters:
      - description: Account ID to delete
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Account not found
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict (e.g., already deleted)
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to delete account
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete an account
      tags:
      - accounts
    get:
      description: Retrieves details for a specific account by its ID
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AccountResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden (accessing another user's account)
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Account not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to retrieve account
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get an account by ID
      tags:
      - accounts
    put:
      consumes:
      - application/json
      description: Updates an account's details (e.g., name)
      parameters:
      - description: Account ID to update
        in: path
        name: id
        required: true
        type: string
      - description: Account details to update
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AccountResponse'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Account not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to update account
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update an account
      tags:
      - accounts
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token.
      parameters:
      - description: Login Credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: User login
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account.
      parameters:
      - description: User Registration Info
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Conflict (e.g., username exists)
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Register new user
      tags:
      - auth
  /currencies:
    get:
      description: Retrieves a list of all available currencies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.CurrencyResponse'
            type: array
        "500":
          description: Failed to list currencies
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all currencies
      tags:
      - currencies
    post:
      consumes:
      - application/json
      description: Adds a new currency to the system (admin operation)
      parameters:
      - description: Currency details
        in: body
        name: currency
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCurrencyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CurrencyResponse'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Currency code already exists
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to create currency
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new currency
      tags:
      - currencies
  /currencies/{code}:
    get:
      description: Retrieves details for a specific currency by its 3-letter code
      parameters:
      - description: Currency Code (3 letters)
        in: path
        maxLength: 3
        minLength: 3
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CurrencyResponse'
        "404":
          description: Currency not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to retrieve currency
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a currency by code
      tags:
      - currencies
  /exchange-rates:
    post:
      consumes:
      - application/json
      description: Adds a new exchange rate between two currencies for a specific
        date
      parameters:
      - description: Exchange Rate details
        in: body
        name: rate
        required: true
        schema:
          $ref: '#/definitions/dto.CreateExchangeRateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ExchangeRateResponse'
        "400":
          description: Invalid input format or validation error
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to create exchange rate
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new exchange rate
      tags:
      - exchange rates
  /exchange-rates/{from}/{to}:
    get:
      description: Retrieves the latest exchange rate for a given currency pair
      parameters:
      - description: From Currency Code (3 letters)
        in: path
        maxLength: 3
        minLength: 3
        name: from
        required: true
        type: string
      - description: To Currency Code (3 letters)
        in: path
        maxLength: 3
        minLength: 3
        name: to
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ExchangeRateResponse'
        "400":
          description: Invalid currency code format
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Exchange rate not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to retrieve exchange rate
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get an exchange rate
      tags:
      - exchange rates
  /journals:
    post:
      consumes:
      - application/json
      description: Creates a new journal and associated transactions
      parameters:
      - description: Journal and Transactions
        in: body
        name: journal
        required: true
        schema:
          $ref: '#/definitions/dto.CreateJournalAndTxn'
      produces:
      - application/json
      responses:
        "200":
          description: Returns the ID of the created journal
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request format or validation error
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to persist journal
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Persist a journal entry with its transactions
      tags:
      - journals
  /journals/{id}:
    get:
      description: Retrieves a journal and its associated transactions by journal
        ID
      parameters:
      - description: Journal ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Journal and its transactions
          schema:
            $ref: '#/definitions/dto.GetJournalResponse'
        "404":
          description: Journal not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to retrieve journal
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a journal entry and its transactions
      tags:
      - journals
  /users:
    get:
      description: Retrieves a list of users (potentially admin only)
      parameters:
      - default: 20
        description: Limit number of results
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListUsersResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to list users
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Creates a new user (typically an admin action)
      parameters:
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to create user
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      description: Marks a user as deleted (soft delete)
      parameters:
      - description: User ID to delete
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to delete user
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - users
    get:
      description: Retrieves details for a specific user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden (trying to access another user's details)
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to retrieve user
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates a user's details (currently only name)
      parameters:
      - description: User ID to update
        in: path
        name: id
        required: true
        type: string
      - description: User details to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to update user
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - users
security:
- BearerAuth: []
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
