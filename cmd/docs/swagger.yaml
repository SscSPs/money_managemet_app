basePath: /
definitions:
  domain.AccountType:
    enum:
    - ASSET
    - LIABILITY
    - EQUITY
    - REVENUE
    - EXPENSE
    type: string
    x-enum-varnames:
    - Asset
    - Liability
    - Equity
    - Revenue
    - Expense
  domain.JournalStatus:
    enum:
    - POSTED
    - REVERSED
    type: string
    x-enum-varnames:
    - Posted
    - Reversed
  domain.TransactionType:
    enum:
    - DEBIT
    - CREDIT
    type: string
    x-enum-varnames:
    - Debit
    - Credit
  domain.UserWorkplaceRole:
    enum:
    - ADMIN
    - MEMBER
    - REMOVED
    type: string
    x-enum-comments:
      RoleRemoved: For users who have been removed from the workplace
    x-enum-varnames:
    - RoleAdmin
    - RoleMember
    - RoleRemoved
  dto.AccountResponse:
    properties:
      accountID:
        type: string
      accountType:
        $ref: '#/definitions/domain.AccountType'
      balance:
        description: Balance is not typically included directly; might be a separate
          endpoint or calculation
        type: number
      createdAt:
        type: string
      createdBy:
        description: UserID
        type: string
      currencyCode:
        type: string
      description:
        type: string
      isActive:
        type: boolean
      lastUpdatedAt:
        type: string
      lastUpdatedBy:
        description: UserID
        type: string
      name:
        type: string
      parentAccountID:
        type: string
      workplaceID:
        type: string
    type: object
  dto.AddUserToWorkplaceRequest:
    properties:
      role:
        allOf:
        - $ref: '#/definitions/domain.UserWorkplaceRole'
        enum:
        - ADMIN
        - MEMBER
        - REMOVED
      userID:
        type: string
    required:
    - role
    - userID
    type: object
  dto.CreateAccountRequest:
    properties:
      accountType:
        allOf:
        - $ref: '#/definitions/domain.AccountType'
        enum:
        - ASSET
        - LIABILITY
        - EQUITY
        - REVENUE
        - EXPENSE
      currencyCode:
        type: string
      description:
        type: string
      name:
        type: string
      parentAccountID:
        description: Optional, must be UUID if provided
        type: string
    required:
    - accountType
    - currencyCode
    - name
    type: object
  dto.CreateCurrencyRequest:
    properties:
      currencyCode:
        type: string
      name:
        type: string
      precision:
        maximum: 30
        minimum: 0
        type: integer
      symbol:
        type: string
    required:
    - currencyCode
    - name
    - symbol
    type: object
  dto.CreateExchangeRateRequest:
    properties:
      dateEffective:
        type: string
      fromCurrencyCode:
        type: string
      rate:
        description: Consider adding validation for > 0
        type: number
      toCurrencyCode:
        type: string
    required:
    - dateEffective
    - fromCurrencyCode
    - rate
    - toCurrencyCode
    type: object
  dto.CreateJournalRequest:
    properties:
      currencyCode:
        description: Enforce valid currency code
        type: string
      date:
        type: string
      description:
        type: string
      transactions:
        description: Embed transactions
        items:
          $ref: '#/definitions/dto.CreateTransactionRequest'
        minItems: 2
        type: array
    required:
    - currencyCode
    - date
    - transactions
    type: object
  dto.CreateTransactionRequest:
    properties:
      accountID:
        type: string
      amount:
        description: Use custom validator
        type: number
      notes:
        type: string
      transactionType:
        allOf:
        - $ref: '#/definitions/domain.TransactionType'
        enum:
        - DEBIT
        - CREDIT
    required:
    - accountID
    - amount
    - transactionType
    type: object
  dto.CreateUserRequest:
    properties:
      name:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.CreateWorkplaceRequest:
    properties:
      defaultCurrencyCode:
        type: string
      description:
        type: string
      name:
        type: string
    required:
    - defaultCurrencyCode
    - name
    type: object
  dto.CurrencyResponse:
    properties:
      currencyCode:
        type: string
      name:
        type: string
      precision:
        type: integer
      symbol:
        type: string
    type: object
  dto.DeactivateWorkplaceRequest:
    type: object
  dto.ExchangeRateResponse:
    properties:
      createdAt:
        type: string
      createdBy:
        type: string
      dateEffective:
        type: string
      exchangeRateID:
        type: string
      fromCurrencyCode:
        type: string
      lastUpdatedAt:
        type: string
      lastUpdatedBy:
        type: string
      rate:
        type: number
      toCurrencyCode:
        type: string
    type: object
  dto.JournalResponse:
    properties:
      amount:
        description: Total movement amount in the journal
        type: number
      createdAt:
        type: string
      createdBy:
        type: string
      currencyCode:
        type: string
      date:
        type: string
      description:
        type: string
      journalID:
        type: string
      lastUpdatedAt:
        type: string
      lastUpdatedBy:
        type: string
      originalJournalID:
        type: string
      reversingJournalID:
        type: string
      status:
        allOf:
        - $ref: '#/definitions/domain.JournalStatus'
        description: Status (e.g., POSTED, REVERSED)
      transactions:
        description: Added transactions
        items:
          $ref: '#/definitions/dto.TransactionResponse'
        type: array
      workplaceID:
        type: string
    type: object
  dto.ListAccountsResponse:
    properties:
      accounts:
        items:
          $ref: '#/definitions/dto.AccountResponse'
        type: array
    type: object
  dto.ListJournalsResponse:
    properties:
      journals:
        items:
          $ref: '#/definitions/dto.JournalResponse'
        type: array
      nextToken:
        description: Token to fetch the next page
        type: string
    type: object
  dto.ListTransactionsResponse:
    properties:
      nextToken:
        description: Pagination metadata (e.g., NextToken) to be added
        type: string
      transactions:
        items:
          $ref: '#/definitions/dto.TransactionResponse'
        type: array
    type: object
  dto.ListUsersResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/dto.UserResponse'
        type: array
    type: object
  dto.ListWorkplaceUsersResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/dto.UserWorkplaceResponse'
        type: array
    type: object
  dto.ListWorkplacesResponse:
    properties:
      workplaces:
        items:
          $ref: '#/definitions/dto.WorkplaceResponse'
        type: array
    type: object
  dto.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.LoginResponse:
    properties:
      token:
        type: string
    type: object
  dto.TransactionResponse:
    properties:
      accountID:
        type: string
      amount:
        description: Always positive
        type: number
      createdAt:
        type: string
      createdBy:
        type: string
      currencyCode:
        type: string
      journalID:
        type: string
      notes:
        type: string
      runningBalance:
        description: Added running balance
        type: number
      transactionID:
        type: string
      transactionType:
        $ref: '#/definitions/domain.TransactionType'
    type: object
  dto.UpdateAccountRequest:
    properties:
      description:
        type: string
      isActive:
        type: boolean
      name:
        type: string
    type: object
  dto.UpdateJournalRequest:
    properties:
      date:
        description: Pointer to allow optional update
        type: string
      description:
        description: Pointer to allow optional update
        type: string
    type: object
  dto.UpdateUserRequest:
    properties:
      name:
        description: Only name is updatable for now
        type: string
    type: object
  dto.UpdateUserRoleRequest:
    properties:
      role:
        allOf:
        - $ref: '#/definitions/domain.UserWorkplaceRole'
        enum:
        - ADMIN
        - MEMBER
        - REMOVED
    required:
    - role
    type: object
  dto.UserResponse:
    properties:
      name:
        type: string
      userID:
        type: string
      username:
        type: string
    type: object
  dto.UserWorkplaceResponse:
    properties:
      joinedAt:
        type: string
      role:
        $ref: '#/definitions/domain.UserWorkplaceRole'
      userID:
        type: string
      userName:
        description: User's name
        type: string
      workplaceID:
        type: string
    type: object
  dto.WorkplaceResponse:
    properties:
      createdAt:
        type: string
      createdBy:
        description: UserID
        type: string
      defaultCurrencyCode:
        type: string
      description:
        type: string
      isActive:
        type: boolean
      lastUpdatedAt:
        type: string
      lastUpdatedBy:
        description: UserID
        type: string
      name:
        type: string
      workplaceID:
        type: string
    type: object
  handlers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server for MMA backend.
  title: MMA Backend API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token.
      parameters:
      - description: Login Credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: User login
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Creates a new user account.
      parameters:
      - description: User Registration Info
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "409":
          description: Conflict (e.g., username exists)
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Register new user
      tags:
      - auth
  /currencies:
    get:
      description: Retrieves a list of all available currencies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.CurrencyResponse'
            type: array
        "500":
          description: Failed to list currencies
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all currencies
      tags:
      - currencies
    post:
      consumes:
      - application/json
      description: Adds a new currency to the system (admin operation)
      parameters:
      - description: Currency details
        in: body
        name: currency
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCurrencyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CurrencyResponse'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Currency code already exists
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to create currency
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new currency
      tags:
      - currencies
  /currencies/{code}:
    get:
      description: Retrieves details for a specific currency by its 3-letter code
      parameters:
      - description: Currency Code (3 letters)
        in: path
        maxLength: 3
        minLength: 3
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CurrencyResponse'
        "404":
          description: Currency not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to retrieve currency
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a currency by code
      tags:
      - currencies
  /exchange-rates:
    post:
      consumes:
      - application/json
      description: Adds a new exchange rate between two currencies for a specific
        date
      parameters:
      - description: Exchange Rate details
        in: body
        name: rate
        required: true
        schema:
          $ref: '#/definitions/dto.CreateExchangeRateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.ExchangeRateResponse'
        "400":
          description: Invalid input format or validation error
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to create exchange rate
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new exchange rate
      tags:
      - exchange rates
  /exchange-rates/{from}/{to}:
    get:
      description: Retrieves the latest exchange rate for a given currency pair
      parameters:
      - description: From Currency Code (3 letters)
        in: path
        maxLength: 3
        minLength: 3
        name: from
        required: true
        type: string
      - description: To Currency Code (3 letters)
        in: path
        maxLength: 3
        minLength: 3
        name: to
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ExchangeRateResponse'
        "400":
          description: Invalid currency code format
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Exchange rate not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to retrieve exchange rate
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get an exchange rate
      tags:
      - exchange rates
  /users:
    get:
      description: Retrieves a list of users (potentially admin only)
      parameters:
      - default: 20
        description: Limit number of results
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListUsersResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to list users
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Creates a new user (typically an admin action)
      parameters:
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to create user
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      description: Marks a user as deleted (soft delete)
      parameters:
      - description: User ID to delete
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to delete user
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - users
    get:
      description: Retrieves details for a specific user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden (trying to access another user's details)
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to retrieve user
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Updates a user's details (currently only name)
      parameters:
      - description: User ID to update
        in: path
        name: id
        required: true
        type: string
      - description: User details to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to update user
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - users
  /workplaces:
    get:
      description: Retrieves a list of workplaces the authenticated user belongs to.
      parameters:
      - description: 'Include disabled workplaces (default: false)'
        in: query
        name: includeDisabled
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListWorkplacesResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to list workplaces
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List workplaces for current user
      tags:
      - workplaces
    post:
      consumes:
      - application/json
      description: Creates a new workplace and assigns the creator as admin.
      parameters:
      - description: Workplace details
        in: body
        name: workplace
        required: true
        schema:
          $ref: '#/definitions/dto.CreateWorkplaceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.WorkplaceResponse'
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to create workplace
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new workplace
      tags:
      - workplaces
  /workplaces/{workplace_id}/accounts:
    get:
      description: Retrieves a list of accounts for the specified workplace if the
        user is a member.
      parameters:
      - description: Workplace ID
        in: path
        name: workplace_id
        required: true
        type: string
      - default: 20
        description: Limit number of results
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListAccountsResponse'
        "400":
          description: Missing Workplace ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden (User not part of workplace)
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to list accounts
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List accounts for current user in workplace
      tags:
      - accounts
    post:
      consumes:
      - application/json
      description: Creates a new account within the specified workplace.
      parameters:
      - description: Workplace ID
        in: path
        name: workplace_id
        required: true
        type: string
      - description: Account details
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.CreateAccountRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.AccountResponse'
        "400":
          description: Invalid input or missing Workplace ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden (User cannot create in this workplace)
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to create account
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create account in workplace
      tags:
      - accounts
  /workplaces/{workplace_id}/accounts/{id}:
    delete:
      description: Marks an account as inactive within a specified workplace.
      parameters:
      - description: Workplace ID
        in: path
        name: workplace_id
        required: true
        type: string
      - description: Account ID to deactivate
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Missing Workplace or Account ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden (User cannot deactivate)
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Account not found in this workplace
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict (e.g., already inactive)
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to deactivate account
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Deactivate account in workplace
      tags:
      - accounts
    get:
      description: Retrieves details for a specific account by its ID within a workplace.
      parameters:
      - description: Workplace ID
        in: path
        name: workplace_id
        required: true
        type: string
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AccountResponse'
        "400":
          description: Missing Workplace or Account ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden (User not part of workplace)
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Account not found in this workplace
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to retrieve account
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get account by ID from workplace
      tags:
      - accounts
    put:
      consumes:
      - application/json
      description: Updates details for a specific account within a workplace.
      parameters:
      - description: Workplace ID
        in: path
        name: workplace_id
        required: true
        type: string
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      - description: Account details to update
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AccountResponse'
        "400":
          description: Invalid input or missing IDs
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden (User cannot update)
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Account not found in this workplace
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to update account
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update account in workplace
      tags:
      - accounts
  /workplaces/{workplace_id}/accounts/{id}/transactions:
    get:
      description: Retrieves a paginated list of transactions associated with a specific
        account within a workplace.
      parameters:
      - description: Workplace ID
        in: path
        name: workplace_id
        required: true
        type: string
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      - default: 20
        description: Limit number of results
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListTransactionsResponse'
        "400":
          description: Missing Workplace/Account ID or invalid query params
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden (User not part of workplace)
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Account not found in this workplace
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to list transactions
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List transactions for an account in a workplace
      tags:
      - accounts
  /workplaces/{workplace_id}/activate:
    post:
      consumes:
      - application/json
      description: Marks a workplace as active (requires admin permission).
      parameters:
      - description: Workplace ID
        in: path
        name: workplace_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden (caller is not admin)
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Workplace not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to activate workplace
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Activate a workplace
      tags:
      - workplaces
  /workplaces/{workplace_id}/deactivate:
    post:
      consumes:
      - application/json
      description: Marks a workplace as inactive (requires admin permission).
      parameters:
      - description: Workplace ID
        in: path
        name: workplace_id
        required: true
        type: string
      - description: Deactivation details (optional)
        in: body
        name: request
        schema:
          $ref: '#/definitions/dto.DeactivateWorkplaceRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden (caller is not admin)
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Workplace not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to deactivate workplace
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Deactivate a workplace
      tags:
      - workplaces
  /workplaces/{workplace_id}/journals:
    get:
      description: Retrieves a list of journals for the specified workplace if the
        user is a member.
      parameters:
      - description: Workplace ID
        in: path
        name: workplace_id
        required: true
        type: string
      - default: 20
        description: Limit number of results
        in: query
        name: limit
        type: integer
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListJournalsResponse'
        "400":
          description: Missing Workplace ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden (User not part of workplace)
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to list journals
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List journals for current user in workplace
      tags:
      - journals
    post:
      consumes:
      - application/json
      description: Creates a new journal entry within the specified workplace.
      parameters:
      - description: Workplace ID
        in: path
        name: workplace_id
        required: true
        type: string
      - description: Journal details
        in: body
        name: journal
        required: true
        schema:
          $ref: '#/definitions/dto.CreateJournalRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.JournalResponse'
        "400":
          description: Invalid input or missing Workplace ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden (User cannot create in this workplace)
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to create journal
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new journal in workplace
      tags:
      - journals
  /workplaces/{workplace_id}/journals/{id}:
    delete:
      description: Marks a journal entry as inactive within a specified workplace.
      parameters:
      - description: Workplace ID
        in: path
        name: workplace_id
        required: true
        type: string
      - description: Journal ID to deactivate
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Missing Workplace or Journal ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden (User cannot deactivate)
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Journal not found in this workplace
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict (e.g., already inactive)
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to deactivate journal
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Deactivate a journal entry in workplace
      tags:
      - journals
    get:
      description: Retrieves details for a specific journal entry by its ID within
        a workplace.
      parameters:
      - description: Workplace ID
        in: path
        name: workplace_id
        required: true
        type: string
      - description: Journal ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.JournalResponse'
        "400":
          description: Missing Workplace or Journal ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden (User not part of workplace)
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Journal not found in this workplace
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to retrieve journal
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a journal by ID from workplace
      tags:
      - journals
    put:
      consumes:
      - application/json
      description: Updates details (like description, date) for a specific journal
        entry within a workplace.
      parameters:
      - description: Workplace ID
        in: path
        name: workplace_id
        required: true
        type: string
      - description: Journal ID
        in: path
        name: id
        required: true
        type: string
      - description: Journal details to update
        in: body
        name: journal
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateJournalRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.JournalResponse'
        "400":
          description: Invalid input or missing IDs
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden (User cannot update)
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Journal not found in this workplace
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to update journal
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a journal entry in workplace
      tags:
      - journals
  /workplaces/{workplace_id}/journals/{id}/reverse:
    post:
      description: Reverses a specific journal entry by creating a new journal with
        opposite transaction types.
      parameters:
      - description: Workplace ID
        in: path
        name: workplace_id
        required: true
        type: string
      - description: Journal ID to reverse
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The newly created reversing journal entry
          schema:
            $ref: '#/definitions/dto.JournalResponse'
        "400":
          description: Missing Workplace or Journal ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden (User cannot reverse)
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Journal not found in this workplace
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict (e.g., journal already reversed or not posted)
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to reverse journal
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Reverse a journal entry in workplace
      tags:
      - journals
  /workplaces/{workplace_id}/users:
    get:
      description: Retrieves a list of users and their roles in the specified workplace.
      parameters:
      - description: Workplace ID
        in: path
        name: workplace_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListWorkplaceUsersResponse'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden (caller is not a member)
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Workplace not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to list workplace users
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List users in a workplace
      tags:
      - workplaces
    post:
      consumes:
      - application/json
      description: Adds a specified user to a workplace with a given role (requires
        admin permission).
      parameters:
      - description: Workplace ID
        in: path
        name: workplace_id
        required: true
        type: string
      - description: User ID and Role
        in: body
        name: user_details
        required: true
        schema:
          $ref: '#/definitions/dto.AddUserToWorkplaceRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden (caller is not admin)
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Workplace or User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to add user
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Add a user to a workplace
      tags:
      - workplaces
  /workplaces/{workplace_id}/users/{user_id}:
    delete:
      description: Removes a user from a workplace (requires admin permission)
      parameters:
      - description: Workplace ID
        in: path
        name: workplace_id
        required: true
        type: string
      - description: User ID to remove
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden (caller is not admin)
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Workplace or User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "422":
          description: Cannot remove the last admin
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to remove user
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Remove a user from a workplace
      tags:
      - workplaces
    put:
      consumes:
      - application/json
      description: Updates a user's role in a workplace (requires admin permission)
      parameters:
      - description: Workplace ID
        in: path
        name: workplace_id
        required: true
        type: string
      - description: User ID to update
        in: path
        name: user_id
        required: true
        type: string
      - description: New role for the user
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRoleRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: Forbidden (caller is not admin)
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Workplace or User not found
          schema:
            additionalProperties:
              type: string
            type: object
        "422":
          description: Cannot demote the last admin
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to update role
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update a user's role in a workplace
      tags:
      - workplaces
security:
- BearerAuth: []
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
