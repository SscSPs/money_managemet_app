basePath: /
definitions:
  dto.AccountResponse:
    properties:
      accountID:
        type: string
      accountType:
        $ref: '#/definitions/models.AccountType'
      createdAt:
        type: string
      createdBy:
        type: string
      currencyCode:
        type: string
      description:
        type: string
      isActive:
        type: boolean
      lastUpdatedAt:
        type: string
      lastUpdatedBy:
        type: string
      name:
        type: string
      parentAccountID:
        description: 'Note: Empty string if null in DB'
        type: string
    type: object
  dto.CreateAccountRequest:
    properties:
      accountType:
        allOf:
        - $ref: '#/definitions/models.AccountType'
        enum:
        - ASSET
        - LIABILITY
        - EQUITY
        - INCOME
        - EXPENSE
      currencyCode:
        type: string
      description:
        description: Optional
        type: string
      name:
        type: string
      parentAccountID:
        description: Optional, use pointer for nullability
        type: string
      userID:
        description: needed for audit fields
        type: string
    required:
    - accountType
    - currencyCode
    - name
    type: object
  dto.CreateCurrencyRequest:
    properties:
      currencyCode:
        type: string
      name:
        type: string
      symbol:
        type: string
      userID:
        type: string
    required:
    - currencyCode
    - name
    - symbol
    - userID
    type: object
  dto.CreateJournalAndTxn:
    properties:
      journal:
        $ref: '#/definitions/models.Journal'
      transactions:
        items:
          $ref: '#/definitions/models.Transaction'
        type: array
      userID:
        type: string
    type: object
  dto.CreateUserRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  dto.CurrencyResponse:
    properties:
      createdAt:
        type: string
      createdBy:
        type: string
      currencyCode:
        type: string
      lastUpdatedAt:
        type: string
      lastUpdatedBy:
        type: string
      name:
        type: string
      symbol:
        type: string
    type: object
  dto.UserResponse:
    properties:
      createdAt:
        type: string
      createdBy:
        type: string
      lastUpdatedAt:
        type: string
      lastUpdatedBy:
        type: string
      name:
        type: string
      userID:
        type: string
    type: object
  models.AccountType:
    enum:
    - ASSET
    - LIABILITY
    - EQUITY
    - INCOME
    - EXPENSE
    type: string
    x-enum-varnames:
    - Asset
    - Liability
    - Equity
    - Income
    - Expense
  models.Journal:
    properties:
      createdAt:
        type: string
      createdBy:
        description: UserID Reference
        type: string
      currencyCode:
        description: Primary currency of the Journal (Not Null)
        type: string
      description:
        description: Nullable user description
        type: string
      journalDate:
        description: Date the event occurred
        type: string
      journalID:
        description: Primary Key (e.g., UUID)
        type: string
      lastUpdatedAt:
        type: string
      lastUpdatedBy:
        description: UserID Reference
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.JournalStatus'
        description: 'Default: Posted'
    type: object
  models.JournalStatus:
    enum:
    - POSTED
    - REVERSED
    type: string
    x-enum-varnames:
    - Posted
    - Reversed
  models.Transaction:
    properties:
      accountID:
        description: FK -> Account.accountID (Not Null)
        type: string
      amount:
        description: Positive value; Precise decimal type
        type: number
      createdAt:
        type: string
      createdBy:
        description: UserID Reference
        type: string
      currencyCode:
        description: Must match Journal currency (Not Null)
        type: string
      journalID:
        description: FK -> Journal.journalID (Not Null)
        type: string
      lastUpdatedAt:
        type: string
      lastUpdatedBy:
        description: UserID Reference
        type: string
      notes:
        description: Nullable
        type: string
      transactionID:
        description: Primary Key (e.g., UUID)
        type: string
      transactionType:
        allOf:
        - $ref: '#/definitions/models.TransactionType'
        description: DEBIT or CREDIT (Not Null)
    type: object
  models.TransactionType:
    enum:
    - DEBIT
    - CREDIT
    type: string
    x-enum-varnames:
    - Debit
    - Credit
host: localhost:8080
info:
  contact: {}
  description: This is a sample server for MMA backend.
  title: MMA Backend API
  version: "1.0"
paths:
  /accounts:
    post:
      consumes:
      - application/json
      description: Creates a new account (Asset, Liability, Equity, Income, Expense)
      parameters:
      - description: Account details
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/dto.CreateAccountRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.AccountResponse'
        "400":
          description: Invalid input
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Create a new financial account
      tags:
      - accounts
  /accounts/{accountID}:
    get:
      consumes:
      - application/json
      description: Retrieves details for a specific account by its ID
      parameters:
      - description: Account ID
        in: path
        name: accountID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AccountResponse'
        "404":
          description: Account not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get an account by ID
      tags:
      - accounts
  /currencies:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all currencies supported by the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.CurrencyResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            type: string
      summary: List all available currencies
      tags:
      - currencies
    post:
      consumes:
      - application/json
      description: Adds a new currency to the system (e.g., USD, EUR)
      parameters:
      - description: Currency details
        in: body
        name: currency
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCurrencyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CurrencyResponse'
        "400":
          description: Invalid input
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Create a new currency
      tags:
      - currencies
  /currencies/{currencyCode}:
    get:
      consumes:
      - application/json
      description: Retrieves details for a specific currency by its 3-letter code
      parameters:
      - description: Currency Code (3 uppercase letters)
        in: path
        name: currencyCode
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CurrencyResponse'
        "400":
          description: Invalid currency code format
          schema:
            type: string
        "404":
          description: Currency not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get a currency by code
      tags:
      - currencies
  /example/helloworld:
    get:
      consumes:
      - application/json
      description: get a welcome message
      produces:
      - application/json
      responses:
        "200":
          description: Welcome to my Go app!
          schema:
            items:
              type: string
            type: array
      summary: Show a welcome message
      tags:
      - home
  /ledger/:
    post:
      consumes:
      - application/json
      description: Creates a new journal and associated transactions
      parameters:
      - description: Journal and Transactions
        in: body
        name: journal
        required: true
        schema:
          $ref: '#/definitions/dto.CreateJournalAndTxn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Persist a journal entry with its transactions
      tags:
      - ledger
  /ledger/{journalID}:
    get:
      consumes:
      - application/json
      description: Retrieves a journal and its associated transactions by journal
        ID
      parameters:
      - description: Journal ID
        in: path
        name: journalID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreateJournalAndTxn'
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a journal entry and its transactions
      tags:
      - ledger
  /users:
    post:
      consumes:
      - application/json
      description: Creates a new user account
      parameters:
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid input
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Create a new user
      tags:
      - users
  /users/{userID}:
    get:
      consumes:
      - application/json
      description: Retrieves details for a specific user by their ID
      parameters:
      - description: User ID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get a user by ID
      tags:
      - users
swagger: "2.0"
