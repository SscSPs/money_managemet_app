package dto

import (
	"time"

	"github.com/SscSPs/money_managemet_app/internal/core/domain"
)

// CreateUserRequest defines the data needed to create a new user.
// Assuming UserID is generated by the system or passed separately.
type CreateUserRequest struct {
	Name string `json:"name" binding:"required"`
	// Add other fields like email, password hash etc. if needed later
}

// UserResponse defines the data returned for a user.
type UserResponse struct {
	UserID        string    `json:"userID"`
	Name          string    `json:"name"`
	CreatedAt     time.Time `json:"createdAt"`
	CreatedBy     string    `json:"createdBy"`
	LastUpdatedAt time.Time `json:"lastUpdatedAt"`
	LastUpdatedBy string    `json:"lastUpdatedBy"`
	// Add other fields if needed later
}

// ToUserResponse converts a domain.User to UserResponse DTO
func ToUserResponse(user *domain.User) UserResponse {
	return UserResponse{
		UserID:        user.UserID,
		Name:          user.Name,
		CreatedAt:     user.CreatedAt,
		CreatedBy:     user.CreatedBy,
		LastUpdatedAt: user.LastUpdatedAt,
		LastUpdatedBy: user.LastUpdatedBy,
	}
}

// UpdateUserRequest defines the data allowed for updating a user.
// Using pointers to differentiate between omitted fields and zero-value fields.
type UpdateUserRequest struct {
	Name *string `json:"name"` // Only name is updatable for now
}

// ListUsersParams defines query parameters for listing users.
type ListUsersParams struct {
	Limit  int `form:"limit,default=20"`
	Offset int `form:"offset,default=0"`
}

// ListUsersResponse wraps the list of users.
type ListUsersResponse struct {
	Users []UserResponse `json:"users"`
	// TODO: Add pagination metadata (total count, limit, offset) later
}

// ToListUserResponse converts a slice of domain.User to ListUsersResponse DTO
func ToListUserResponse(users []domain.User) ListUsersResponse {
	userResponses := make([]UserResponse, len(users))
	for i, user := range users {
		userResponses[i] = ToUserResponse(&user)
	}
	return ListUsersResponse{
		Users: userResponses,
	}
}
